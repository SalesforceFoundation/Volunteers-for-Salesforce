<!-- 
// Written by David Habib, copyright (c) 2010-2013 DJH Consulting, djhconsulting.com 
// This program is released under the GNU Affero General Public License, Version 3. http://www.gnu.org/licenses/
-->
 
<apex:page controller="VOL_CTRL_JobCalendar" language="{!HTMLENCODE(strLanguage)}" showheader="{!AND(NOT(fPrint),NOT(fWeb))}" 
    sidebar="{!AND(NOT(fPrint),NOT(fWeb))}" standardStylesheets="{!NOT(fWeb)}" tabStyle="Shift_Calendar__tab" cache="false" > 
 
<script src="{!URLFOR($Resource.jQueryFiles, 'js/jquery-1.4.4.min.js')}"/>
<script src="{!URLFOR($Resource.jQueryFiles, 'js/jquery-ui-1.8.7.custom.min.js')}"/>
<script src="{!URLFOR($Resource.FullCalendar, 'fullcalendar/fullcalendar.js')}"/>
<script src="{!URLFOR($Resource.wtooltip, 'wtooltip.min.js')}"/>
<apex:stylesheet value="{!URLFOR($Resource.FullCalendar, 'fullcalendar/fullcalendar.css')}"/>
<apex:stylesheet value="{!strURLtoCSSFile}" /> 

<script type="text/javascript">
    var j$ = jQuery.noConflict();
    var colors = new Array({!$Label.labelColorValues}); 

    j$(function() {
    
        // initialize the Calendar
        j$('#calendar').fullCalendar({
            
            weekMode: 'variable',
            selectable: true,
            aspectRatio: 2,
            firstHour: 8,
            firstDay: {!$Label.labelCalendarFirstDay},
            
            buttonText:     { {!$Label.labelCalendarButtonText} },
            timeFormat:     { {!$Label.labelCalendarTimeFormat} },
            columnFormat:   { {!$Label.labelCalendarColumnFormat} },
            titleFormat:    { {!$Label.labelCalendarTitleFormat} },
            monthNames:     [ {!$Label.labelCalendarMonthNames} ],
            monthNamesShort:[ {!$Label.labelCalendarMonthNamesShort} ], 
            dayNames:       [ {!$Label.labelCalendarDayNames} ],
            dayNamesShort:  [ {!$Label.labelCalendarDayNamesShort} ],   
            allDayText:     '{!$Label.labelCalendarAllDay}',
            axisFormat:     '{!$Label.labelCalendarAxisFormat}',
            
            
            header: {
                center: 'today, prev,next',
                right: 'month,agendaWeek,agendaDay'
            },
            
            // when the selection changes, update the current date, so switching views will go to that day.
            select: function(startDate, endDate, allDay, jsEvent, view) {
                if (jsEvent != null) {
                    j$('#calendar').fullCalendar('gotoDate', startDate);
                    j$('#calendar').fullCalendar('select', startDate, endDate, allDay);
                }
            },
            
            // the callback to provide calendar events.  
            // this calls our RemoteAction to query Salesforce.  
            // special case that '*' means all campaigns and/or all jobs.
            events: function(start, end, callback) {
                var campaignId;
                // handle web page scenario where there is no campaign dropdown.
                if (j$('select[name$=ddlCampaignId]').length == 0) {
                    campaignId = '{!campaignId}';
                } else {
                    campaignId = j$('select[name$=ddlCampaignId]').val();
                }
                if (campaignId == null || campaignId == '') campaignId = '*';
                var jobId;
                // handle web page scenario where there is no job dropdown.
                if ( j$('select[name$=ddlJobId]').length == 0) {
                    jobId = '{!volunteerJobId}';
                } else {
                    jobId = j$('select[name$=ddlJobId]').val();
                }
                if (jobId == null || jobId == '') jobId = '*';

                GW_Volunteers.VOL_CTRL_JobCalendar.getListShiftsWeb2(
                    campaignId, jobId, strApexDateLocale(start, false), strApexDateLocale(end, false), {!fWeb}, {!fShowCampaignHierarchy}, function(result, event) {
                    if (event.type == 'exception') {
                        alert(event.message);
                    } else {
                        if (result != null) {
                            var shifts = [];
                            var jobIds = [];
                            for (var i = 0; i < result.length; i++) {
                                var dtStart = new Date(result[i].GW_Volunteers__Start_Date_Time__c);
                                var dtEnd = new Date(dtStart);
                                dtEnd.setMinutes(dtEnd.getMinutes() + (result[i].GW_Volunteers__Duration__c * 60));
                                
                                // map JobId's to unique colors.
                                var jobId = result[i].GW_Volunteers__Volunteer_Job__c;
                                
                                // used to map job to colors on a first come basis,
                                // but now try to match a color to a job regardless of
                                // what order the job appears on the page.
                                // var icolor = jQuery.inArray(jobId, jobIds);
                                // if (icolor == -1) { icolor = jobIds.push(jobId) - 1; } 
                                var icolor = numFromId(jobId); 
                                var colorShift = colors[icolor % colors.length];
                                                                    
                                var intTotalVolunteers = result[i].GW_Volunteers__Total_Volunteers__c;
                                if (intTotalVolunteers == null) intTotalVolunteers = 0;
                                var intStillNeeded = result[i].GW_Volunteers__Number_of_Volunteers_Still_Needed__c;
                                
                                var strCampaignId = new String(result[i].GW_Volunteers__Volunteer_Job__r.GW_Volunteers__Campaign__c);
                                var strJobId = new String(jobId);
                                var strShiftId = new String(result[i].Id);                              
                                var strUrl;
                                
                                if ({!fWeb}) {
									strUrl = '{!$Site.CurrentSiteUrl + IF(fPersonalSite, 'GW_Volunteers__PersonalSiteJobListing', 'GW_Volunteers__VolunteersJobListingFS')}' +                                     
                                        '?Calendar=1&volunteerShiftId=' + strShiftId + '&jobId=' + strJobId +
                                        '&dtMonthFilter=' + strApexDateLocale(dtStart, true) +
                                        '{!IF(strParams != null, '&' + strParams, '')}';
                                } else if ({!NOT(fPrint)}) {
                                    strUrl = '/' + strShiftId;
                                }                                
                                                
								// note that we lop off the timezone, to avoid FullCalendar from translating it to the current browser locale.                                                
                                shifts.push({
                                    title: result[i].GW_Volunteers__Volunteer_Job__r.Name + (intStillNeeded == 0 ? ' ' + 
                                        '{!$Label.labelCalendarShiftFull}' : ''),
                                    description: result[i].GW_Volunteers__Description__c,                           
                                    strNumbers: '{!$Label.labelCalendarConfirmed}' +  intTotalVolunteers  + 
                                                '{!$Label.labelCalendarStillNeeded}' + (intStillNeeded == null ? '' : intStillNeeded),
                                    urlRoster:  '/apex/GW_Volunteers__OpenReport?ReportDevName=Volunteer_Roster' + 
                                                '&pv0=' + strCampaignId.substr(0, 15) +
                                                '&pv1=' + strJobId.substr(0, 15) +     
                                                '&pv2=' + strShiftId.substr(0,15),    
                                    jobId: strJobId,            
                                    start: dtStart.toISOString().substring(0, 22),
                                    end: dtEnd.toISOString().substring(0, 22),
                                    allDay: false, 
                                    color: colorShift,
                                    url: strUrl
                                });
                            }                           
                            callback(shifts);
                        }
                    }
                }, {escape:false});
            },             
            
            // the callback to handle any customization of the event's display 
            eventRender: function(event, element, view) {
                            
                // display additional info.
                var newinfo = j$('<span />');
                if ({!fWeb}) {
                    newinfo.html((event.description != null ? '<br/> ' + event.description  : ''));
                } else {
                    newinfo.html('&nbsp;&nbsp;&nbsp;&nbsp;<i>' + event.strNumbers + '</i>' +
                                ({!NOT(fPrint)} ? 
                                    '<br/>&nbsp;&nbsp;&nbsp;&nbsp;<a href="' + event.urlRoster + 
                                    '" target="_blank"><b>{!$Label.labelCalendarRoster}</b></a>' : '') +                            
                                    (event.description != null ? '<br/>&nbsp;&nbsp;&nbsp;&nbsp;' + event.description  : '') );
                }
                element.find('.fc-event-content').append(newinfo);
                
                // also add info to a tooltip
                if ({!NOT(fWeb)}) {
                    element.wTooltip({ content: '<i>' + event.strNumbers + '</i>' });
                }           
            }
            
        });    // end of initializing fullcalendar

        // set initial Calendar View based on parameters to page
        if ('{!JSENCODE(strCalendarView)}' != '') {
            j$('#calendar').fullCalendar('changeView', '{!JSENCODE(strCalendarView)}');
            
            // make taller for full agenda views
            if ('{!JSENCODE(strCalendarView)}' != 'month') {
                j$('#calendar').fullCalendar('option', 'height', 1200);
            }
        }
        
        // set initial date based on parameters to page
        // note that we assume all dates coming from Salesforce are in GMT.
        if ('{!initialDate}' != '') {
            var dt = new Date('{!initialDate}');
            //some browsers (IE & mobile Safari) didn't support this,
            //but we didn't really need it!
            //dt = new Date(dt.toLocaleString());
            j$('#calendar').fullCalendar('gotoDate', dt);
            j$('#calendar').fullCalendar('select', dt, dt, false);
            j$('#calendar').fullCalendar('render'); // hack: force repaint so selection appears correctly.
        } 
        
    });
    
    /*******************************************************************************************************
    * utility to put a javascript date into a string format Salesforce expects in Locale time zone
    ********************************************************************************************************/
    function strApexDateLocale(dt, encode) {
        return dt.getFullYear() + '-' + (dt.getMonth()+1) + '-' + dt.getDate() +
            (encode ? '%20' : ' ') + dt.getHours() + ':' + dt.getMinutes() + ':' + dt.getSeconds();
    }

    /*******************************************************************************************************
    * utility to put a javascript date into a string format Salesforce expects in UTC (GMT) time zone
    ********************************************************************************************************/
    function strApexDateUTC(dt) {
        return dt.getUTCFullYear() + '-' + (dt.getUTCMonth()+1) + '-' + dt.getUTCDate() +
            '%20' + dt.getUTCHours() + ':' + dt.getUTCMinutes() + ':' + dt.getUTCSeconds();
    }
        
    /*******************************************************************************************************
    * utility to open the given url in a new browser window for printing.
    ********************************************************************************************************/
    function printWin(url){
        var popWin = window.open(url,"win","dependent=no,toolbar=1,directories=0,location=0,status=1," + 
            "menubar=1,scrollbars=1,resizable=1,width=1200,height=600",false);
        popWin.focus();
    }
    
    /*******************************************************************************************************
    * utility to create a number out of a Salesforce ID.
    ********************************************************************************************************/
    function numFromId(id) {
        var len = id.length;
        var num = 0;
        var i = 0; 
        while (i < len) {
            num += id.charCodeAt(i);
            i++;
        }
        return num;
    }
    
</script>

    <apex:outputPanel id="panelPrint" layout="block" style="float:right" rendered="{!AND(NOT(fPrint),NOT(fWeb))}">
        <a href="javascript:printWin('/apex/GW_Volunteers__JobCalendar?Print=1' + 
            '&campaignId={!campaignId}' + 
            '&volunteerJobId={!volunteerJobId}' +
            '&initialDate=' + strApexDateLocale(j$('#calendar').fullCalendar('getDate'), true) +
            '&CalendarView=' + j$('#calendar').fullCalendar('getView').name
            );" 
            class="configLinks" title="Printable View (New Window)">{!$Label.labelCalendarPrintableView}</a>
    </apex:outputPanel>
    <apex:outputPanel layout="block" style="float:right" rendered="{!AND(fPrint,NOT(fWeb))}">
        <ul>
            <li><a href="javascript:window.close();">{!$Label.labelCalendarCloseWindow}</a></li>
            <li><a href="javascript:window.print();">{!$Label.labelCalendarPrintThisPage}</a></li>
        </ul>
    </apex:outputPanel>
        
    <apex:sectionHeader title="{!$Label.labelCalendarPageTitle}" rendered="{!AND(NOT(fPrint),NOT(fWeb))}" />   
    <apex:form > 
        
        <apex:pageBlock rendered="{!NOT(fWeb)}" >
            <apex:pageBlockSection columns="1" >
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="{!$ObjectType.Campaign.Label}" />
                    <apex:selectList id="ddlCampaignId" value="{!campaignId}" size="1" >
                        <apex:actionSupport immediate="false" event="onchange" rerender="ddlJobId,panelPrint" 
                            status="retrieveStatus" action="{!ChangeCampaign}" />
                        <apex:selectOptions value="{!listSOCampaigns}" /> 
                    </apex:selectList>  
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="{!$ObjectType.Volunteer_Job__c.Label}" />
                    <apex:pageBlockSectionItem >
                        <apex:selectList id="ddlJobId" value="{!volunteerJobId}" size="1" >
                            <apex:actionSupport immediate="false" event="onchange" rerender="panelPrint" 
                                status="retrieveStatus" action="{!ChangeVolunteerJob}" />
                            <apex:selectOptions value="{!listSOVolunteerJobs}" /> 
                        </apex:selectList>
                        <apex:actionStatus layout="inline" startText="{!$Label.labelMessageLoading}" stopText="" id="retrieveStatus" 
                            startStyle="color:green; font-style:italic" stopStyle="color:black;" onstop="j$('#calendar').fullCalendar('refetchEvents');" />
                    </apex:pageBlockSectionItem>
                </apex:pageBlockSectionItem>
                
            </apex:pageBlockSection>
        </apex:pageBlock>
        
    </apex:form>

    <table width="{!IF(fPrint, '1024px', '100%')}">
        <tr><td>
            <div id='calendar'></div>
        </td></tr>
    </table>            

</apex:page>