<!-- 
    Copyright (c) 2016, Salesforce.org
    All rights reserved.
    
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
    
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Salesforce.org nor the names of
      its contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.
 
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
    COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
    POSSIBILITY OF SUCH DAMAGE.
-->  
 
<apex:page controller="VOL_CTRL_JobCalendar"
    language="{!HTMLENCODE(strLanguage)}"
    showheader="{!AND(NOT(fPrint),NOT(fWeb))}"
    sidebar="{!AND(NOT(fPrint),NOT(fWeb))}"
    standardStylesheets="{!NOT(fWeb)}"
    tabStyle="Shift_Calendar__tab"
    cache="false"
    title="{!$Label.labelCalendarPageTitle}">

    <apex:includeScript value="{!URLFOR($Resource.jQueryFiles, 'js/jquery-3.2.1.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.jQueryFiles, 'js/jquery-ui-1.12.1.custom.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.FullCalendar, 'fullcalendar/fullcalendar.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.wtooltip, 'wtooltip.min.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.FullCalendar, 'fullcalendar/fullcalendar.css')}"/>
    <apex:stylesheet value="{!strURLtoCSSFile}"/>
    <apex:variable var="slds" value="slds" rendered="{!!fWeb}">
        <apex:stylesheet value="{!URLFOR($Resource.sfdo213, '/assets/styles/salesforce-lightning-design-system-vf.min.css')}"/>
        <apex:stylesheet value="{!URLFOR($Resource.v4sStaticResources, '/v4s_slds/v4s-common.css')}" />
    </apex:variable>
    <apex:variable var="ns" value="{!IF(namespacePrefix != '', namespacePrefix+'__', '')}" />

<script type="text/javascript">
    var j$ = jQuery.noConflict();
    var colors = JSON.parse('{!colorValues}');

    j$(function() {

        // define curCSS for fullCalendar, which newer version of jquery doesn't include
        j$.curCSS = function(element, prop, val) {
            return j$(element).css(prop, val);
        };
        // initialize the Calendar
        j$('#calendar').fullCalendar({
            
            weekMode: 'variable',
            selectable: true,
            aspectRatio: 2,
            firstHour: 8,
            firstDay: {!JSINHTMLENCODE($Label.labelCalendarFirstDay)},
            
            buttonText:     JSON.parse('{!calendarButtonText}'),
            timeFormat:     JSON.parse('{!calendarTimeFormat}'),
            columnFormat:   JSON.parse('{!calendarColumnFormat}'),
            titleFormat:    JSON.parse('{!calendarTitleFormat}'),
            monthNames:     JSON.parse('{!calendarMonthNames}'),
            monthNamesShort:JSON.parse('{!calendarMonthNamesShort}'),
            dayNames:       JSON.parse('{!calendarDayNames}'),
            dayNamesShort:  JSON.parse('{!calendarDayNamesShort}'),
            allDayText:     '{!JSINHTMLENCODE($Label.labelCalendarAllDay)}',
            axisFormat:     '{!JSINHTMLENCODE($Label.labelCalendarAxisFormat)}',
            
            
            header: {
                center: 'today, prev,next',
                right: 'month,agendaWeek,agendaDay'
            },
            
            // when the selection changes, update the current date, so switching views will go to that day.
            select: function(startDate, endDate, allDay, jsEvent, view) {
                if (jsEvent != null) {
                    j$('#calendar').fullCalendar('gotoDate', startDate);
                    j$('#calendar').fullCalendar('select', startDate, endDate, allDay);
                }
            },
            
            // the callback to provide calendar events.  
            // this calls our RemoteAction to query Salesforce.  
            // special case that '*' means all campaigns and/or all jobs.
            events: function(start, end, callback) {
                var campaignId;
                // handle web page scenario where there is no campaign dropdown.
                if (j$('select[name$=ddlCampaignId]').length == 0) {
                    campaignId = '{!campaignId}';
                } else {
                    campaignId = j$('select[name$=ddlCampaignId]').val();
                }
                if (campaignId == null || campaignId == '') campaignId = '*';
                var jobId;
                // handle web page scenario where there is no job dropdown.
                if ( j$('select[name$=ddlJobId]').length == 0) {
                    jobId = '{!volunteerJobId}';
                } else {
                    jobId = j$('select[name$=ddlJobId]').val();
                }
                if (jobId == null || jobId == '') jobId = '*';
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.VOL_CTRL_JobCalendar.getListShiftsWeb2}',
                    campaignId, jobId, strApexDateLocale(start, false), strApexDateLocale(end, false), {!fWeb}, {!fShowCampaignHierarchy}, function(result, event) {
                    if (event.type == 'exception') {
                        document.getElementById("errorMessage").innerText = event.message;
                    } else {
                        if (result != null) {
                            var shifts = [];
                            var jobIds = [];
                            for (var i = 0; i < result.length; i++) {
                                var dtStart = new Date(result[i].{!ns}Start_Date_Time__c);
                                var dtEnd = new Date(dtStart);
                                dtEnd.setMinutes(dtEnd.getMinutes() + (result[i].{!ns}Duration__c * 60));
                                
                                // map JobId's to unique colors.
                                var jobId = result[i].{!ns}Volunteer_Job__c;
                                
                                // used to map job to colors on a first come basis,
                                // but now try to match a color to a job regardless of
                                // what order the job appears on the page.
                                // var icolor = jQuery.inArray(jobId, jobIds);
                                // if (icolor == -1) { icolor = jobIds.push(jobId) - 1; } 
                                var icolor = numFromId(jobId); 
                                var colorShift = colors[icolor % colors.length];
                                                                    
                                var intTotalVolunteers = result[i].{!ns}Total_Volunteers__c;
                                if (intTotalVolunteers == null) intTotalVolunteers = 0;
                                var intStillNeeded = result[i].{!ns}Number_of_Volunteers_Still_Needed__c;
                                if (intStillNeeded == null) intStillNeeded = 0;
                                var strShiftNumbers = '{!JSINHTMLENCODE($Label.labelShiftNumbers)}';
                                strShiftNumbers = strShiftNumbers.replace('{0}', intTotalVolunteers);
                                strShiftNumbers = strShiftNumbers.replace('{1}', intStillNeeded);
                                
                                var strCampaignId = new String(result[i].{!ns}Volunteer_Job__r.Campaign__c);
                                var strJobId = new String(jobId);
                                var strShiftId = new String(result[i].Id);                              
                                var strUrl;
                                
                                if ({!fWeb}) {
                                    strUrl = '{!$Site.BaseRequestUrl + '/' + IF(fPersonalSite, ns+'PersonalSiteJobListing', ns+'VolunteersJobListingFS')}' +
                                        '?Calendar=1&volunteerShiftId=' + strShiftId + '&jobId=' + strJobId +
                                        '&dtMonthFilter=' + strApexDateUTC(dtStart) +
                                        '{!JSENCODE(IF(strParams != null, '&' + strParams, ''))}';
                                } else if ({!NOT(fPrint)}) {
                                    strUrl = '/' + strShiftId;
                                }                                

                                // note that we lop off the timezone, to avoid FullCalendar from translating it to the current browser locale.
                                shifts.push({
                                    title: result[i].{!ns}Volunteer_Job__r.Name + (intStillNeeded == 0 ? ' ' +
                                        '{!JSINHTMLENCODE($Label.labelCalendarShiftFull)}' : ''),
                                    description: result[i].{!ns}Description__c,
                                    strNumbers: strShiftNumbers,
                                    urlRoster:  '/apex/{!ns}OpenReport?ReportDevName=Volunteer_Roster' + 
                                                '&pv0=' + strCampaignId.substr(0, 15) +
                                                '&pv1=' + strJobId.substr(0, 15) +     
                                                '&pv2=' + strShiftId.substr(0,15),    
                                    jobId: strJobId,            
                                    start: dtStart.toISOString().substring(0, 22),
                                    end: dtEnd.toISOString().substring(0, 22),
                                    allDay: false, 
                                    color: colorShift,
                                    url: strUrl
                                });
                            }                           
                            callback(shifts);
                        }
                    }
                }, {escape:true});
            },             
            
            // the callback to handle any customization of the event's display 
            eventRender: function(event, element, view) {
                            
                // display additional info.
                var newinfo = j$('<span />');
                if ({!fWeb}) {
                    newinfo.html(
                        ({!fShowNumberAvailable} ? '<br/>' + event.strNumbers : '') +
                        (event.description != null ? '<br/> ' + event.description  : '')
                        );
                } else {
                    newinfo.html('<i>' + event.strNumbers + '</i>' +
                                ({!NOT(fPrint)} ? 
                                    '<br/><a href="' + event.urlRoster + 
                                    '" target="_blank"><b>{!JSINHTMLENCODE($Label.labelCalendarRoster)}</b></a>' : '') +                            
                                    (event.description != null ? '<br/>' + event.description  : '') );
                }
                element.find('.fc-event-content').css('padding',2);
                element.find('.fc-event-content').append(newinfo);
                // we override the title ourselves so its html encoding will get rendered correctly.
                element.find('.fc-event-title').html(event.title);
                
                // also add info to a tooltip
                if ({!NOT(fWeb) || fShowNumberAvailable}) {
                    element.wTooltip({ content: '<i>' + event.strNumbers + '</i>' });
                }           
            }
            
        });    // end of initializing fullcalendar

        // set initial Calendar View based on parameters to page
        if ('{!JSINHTMLENCODE(strCalendarView)}' != '') {
            j$('#calendar').fullCalendar('changeView', '{!JSINHTMLENCODE(strCalendarView)}');
            
            // make taller for full agenda views
            if ('{!JSINHTMLENCODE(strCalendarView)}' != 'month') {
                j$('#calendar').fullCalendar('option', 'height', 1200);
            }
        }
        
        // set initial date based on parameters to page
        // note that we assume all dates coming from Salesforce are in GMT.
        if ('{!initialDate}' != '') {
            var dt = new Date('{!initialDate}');
            //some browsers (IE & mobile Safari) didn't support this,
            //but we didn't really need it!
            //dt = new Date(dt.toLocaleString());
            j$('#calendar').fullCalendar('gotoDate', dt);
            j$('#calendar').fullCalendar('select', dt, dt, false);
            j$('#calendar').fullCalendar('render'); // hack: force repaint so selection appears correctly.
        } 
        
    });
    
    /*******************************************************************************************************
    * utility to put a javascript date into a string format Salesforce expects in Locale time zone
    ********************************************************************************************************/
    function strApexDateLocale(dt, encode) {
        return dt.getFullYear() + '-' + (dt.getMonth()+1) + '-' + dt.getDate() +
            (encode ? '%20' : ' ') + dt.getHours() + ':' + dt.getMinutes() + ':' + dt.getSeconds();
    }

    /*******************************************************************************************************
    * utility to put a javascript date into a string format Salesforce expects in UTC (GMT) time zone
    ********************************************************************************************************/
    function strApexDateUTC(dt) {
        return dt.getUTCFullYear() + '-' + (dt.getUTCMonth()+1) + '-' + dt.getUTCDate() +
            '%20' + dt.getUTCHours() + ':' + dt.getUTCMinutes() + ':' + dt.getUTCSeconds();
    }
        
    /*******************************************************************************************************
    * utility to open the given url in a new browser window for printing.
    ********************************************************************************************************/
    function printWin(url){
        var popWin = window.open(url,"win","dependent=no,toolbar=1,directories=0,location=0,status=1," + 
            "menubar=1,scrollbars=1,resizable=1,width=1200,height=600",false);
        popWin.focus();
    }
    
    /*******************************************************************************************************
    * utility to create a number out of a Salesforce ID.
    ********************************************************************************************************/
    function numFromId(id) {
        var len = id.length;
        var num = 0;
        var i = 0; 
        while (i < len) {
            num += id.charCodeAt(i);
            i++;
        }
        return num;
    }
    
</script>

<style type="text/css">
    div.message-panel {
        color: red;
        text-align: center;
        font-size: 15px; 
        padding: 5px;
    }
    div.message-panel:empty {
        display: none;
    }
</style>

    <apex:outputPanel id="panelPrint" layout="block" style="float:right;margin-right:10px;margin-top:10px;" rendered="{!AND(NOT(fPrint),NOT(fWeb))}">
        <a href="javascript:printWin('/apex/{!ns}JobCalendar?Print=1' +
            '&campaignId={!campaignId}' +
            '&volunteerJobId={!volunteerJobId}' +
            '&initialDate=' + strApexDateLocale(j$('#calendar').fullCalendar('getDate'), true) +
            '&CalendarView=' + j$('#calendar').fullCalendar('getView').name
            );"
            class="configLinks" title="Printable View (New Window)">{!JSINHTMLENCODE($Label.labelCalendarPrintableView)}</a>
    </apex:outputPanel>
    <apex:outputPanel layout="block" style="float:right;margin-right:10px;" rendered="{!AND(fPrint,NOT(fWeb))}">
        <ul>
            <li><a href="javascript:window.close();">{!JSINHTMLENCODE($Label.labelCalendarCloseWindow)}</a></li>
            <li><a href="javascript:window.print();">{!JSINHTMLENCODE($Label.labelCalendarPrintThisPage)}</a></li>
        </ul>
    </apex:outputPanel>

    <apex:form id="vfForm">
        <div class="sfdo213">
            <!-- PAGE SPINNER -->
            <div class="slds-spinner_container" style="z-index:999;position:fixed;display:none;" id="divLoading">
                <div class="slds-spinner--brand slds-spinner slds-spinner--medium" style="position:fixed;top:30%;" aria-hidden="false" role="alert">
                    <div class="slds-spinner__dot-a"></div>
                    <div class="slds-spinner__dot-b"></div>
                </div>
            </div>
            <!-- PAGE HEADER -->
            <apex:outputText rendered="{!AND(NOT(fPrint),NOT(fWeb))}">
                <div class="slds-page-header" role="banner">
                    <div class="slds-grid">
                        <div class="slds-col slds-size--1-of-1">
                            <h1 class="slds-text-heading--medium">{!JSINHTMLENCODE($Label.labelCalendarPageTitle)}</h1>
                        </div>
                    </div>
                </div>
            </apex:outputText>
            <!-- PAGE BODY -->
            <div id="errorMessage" role="alert" class="message-panel"></div>
            <apex:outputText rendered="{!NOT(fWeb)}" >
                <div class="slds-container--small slds-p-top--large slds-p-bottom--small">
                    <div class="slds-form--horizontal">
                        <div class="slds-form-element">
                            <apex:outputLabel value="{!$ObjectType.Campaign.Label}" for="ddlCampaignId" styleClass="slds-form-element__label"/>
                            <div class="slds-form-element__control">
                                <div class="slds-select_container">
                                    <apex:selectList id="ddlCampaignId" value="{!campaignId}" size="1" styleClass="slds-select" >
                                        <apex:actionSupport immediate="false" event="onchange" rerender="ddlJobId,panelPrint"
                                            status="retrieveStatus" action="{!ChangeCampaign}" />
                                        <apex:selectOptions value="{!listSOCampaigns}" />
                                    </apex:selectList>
                                </div>
                            </div>
                        </div>
                        <div class="slds-form-element">
                            <apex:outputLabel value="{!$ObjectType.Volunteer_Job__c.Label}" for="ddlJobId" styleClass="slds-form-element__label" />
                            <div class="slds-form-element__control">
                                <div class="slds-select_container">
                                    <apex:selectList id="ddlJobId" value="{!volunteerJobId}" size="1" styleClass="slds-select" >
                                        <apex:actionSupport immediate="false" event="onchange" rerender="panelPrint"
                                            status="retrieveStatus" action="{!ChangeVolunteerJob}" />
                                        <apex:selectOptions value="{!listSOVolunteerJobs}" />
                                    </apex:selectList>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- SPINNER STATUS -->
                <apex:actionStatus id="retrieveStatus"
                    onstart="document.getElementById('divLoading').style.display = 'block';"
                    onstop="document.getElementById('divLoading').style.display = 'none'; j$('#calendar').fullCalendar('refetchEvents');" />
            </apex:outputText>
        </div>
    </apex:form>
    <!-- CALENDAR -->
    <table width="{!IF(fPrint, '1024px', '100%')}">
        <tr><td>
            <div id='calendar' style="{!IF(AND(NOT(fPrint),NOT(fWeb)), 'padding:10px;', null)}}"></div>
        </td></tr>
    </table>
</apex:page>